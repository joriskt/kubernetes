---

- name: Prepare systems for k8s
  hosts: 'control, worker'
  remote_user: kube
  connection: ssh
  become: true
  become_method: sudo
  tasks:

    - name: Prepare to install k8s apt signing key
      ansible.builtin.apt:
        update_cache: true
        name:
          - ca-certificates
          - curl
        state: present

    - name: Install k8s apt key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add k8s apt repository
      ansible.builtin.apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        filename: kubernetes
        state: present
        update_cache: true

    - name: Install k8s binaries
      ansible.builtin.apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present

    - name: Copy modules-load.d/containerd.conf
      ansible.builtin.copy:
        src: "modules-load.d/containerd.conf"
        dest: "/etc/modules-load.d/containerd.conf"
        mode: "0744"

    - name: Install containerd and runc
      ansible.builtin.apt:
        name:
          - containerd
          - runc
        state: present

    - name: Generate default containerd config /etc/containerd/config.toml
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
      changed_when: true

    - name: Set SystemdCgroup=true in containerd config
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: (\s)SystemdCgroup = false
        replace: \1SystemdCgroup = true
      register: containerd

    - name: Restart containerd when config changed
      ansible.builtin.systemd:
        name: containerd
        state: restarted
      when: containerd.changed

    - name: Copy sysctl.d/99-kube-networking.conf
      ansible.builtin.copy:
        src: "sysctl.d/99-kube-networking.conf"
        dest: "/etc/sysctl.d/99-kube-networking.conf"
        mode: "0744"
      register: syctl_changed

    - name: Reload sysctl settings
      ansible.builtin.command: "sysctl --system"
      changed_when: sysctl_changed.changed
      when: syctl_changed.changed

    # - name: Import Google Cloud public signing key
    #   become: true
    #   ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    #   when: "!gc_key_present.exists || (gc_key_downloaded.stat.checksum != gc_key_present.stat.checksum)"
    #   changed_when: true

    # Install containerd:
    # apt install containerd

    # Create default containerd config:
    # containerd config default | sudo tee /etc/containerd/config.toml

    # Edit ONE setting in /etc/containerd/config.toml:
    # nano /etc/containerd/config.toml
    #   DELETE THE LINE that contains: systemd_cgroup
    #   ENSURE that SystemdCgroup is TRUE: "SystemdCgroup = true"

    # Edit /etc/sysctl.conf:
    # - Uncomment "net.ipv4.ip_forward=1" to enable bridging

    # Create/edit /etc/modules-load.d/k8s.conf:
    # - Add line: br_netfilter
    # Save file.

    # Install:
    #   apt install -y ca-certificates curl

    # Download the Google Cloud public signing key:
    #   curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

    # Add the kubernetes apt repository:
    #   echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

    # Install kube binaries:
    #   sudo apt update && sudo apt install -y kubeadm kubectl kubelet
    #     # kubeadm helps us create a cluster and join nodes
    #     # kubectl provides command line utility to manage a cluster and interact with it
    #     # kubelet is an agent -- it facilitates communication between nodes

    # Initialize the cluster [MASTER ONLY]:
    #   sudo kubeadm init --control-plane-endpoint=100.104.244.108 --node-name k8s-master --pod-network-cidr=10.244.0.0/16

    # (Save the output)

    # (Copy the config to your local machine)

    # Deploy flannel [LOCAL]:
    #   kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
