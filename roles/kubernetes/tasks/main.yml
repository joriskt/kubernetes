---

########################
# Install dependencies
########################

- name: Prepare to install k8s apt signing key
  ansible.builtin.apt:
    name:
      - gpg
      - gpg-agent
    state: present

- name: Install k8s apt key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: Add k8s apt repository
  ansible.builtin.apt_repository:
    repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    filename: kubernetes
    state: present
    update_cache: true

- name: Install containerd, runc and kube* binaries
  ansible.builtin.apt:
    name:
      - kubeadm
      - kubectl
      - kubelet
      - containerd
      - runc
    state: present

########################
# Configure containerd
########################

- name: Copy modules-load.d/containerd.conf
  ansible.builtin.copy:
    src: "files/modules-load.d/containerd.conf"
    dest: "/etc/modules-load.d/containerd.conf"
    mode: "0744"

- name: Generate default containerd config /etc/containerd/config.toml
  ansible.builtin.shell: containerd config default > /tmp/containerd.toml
  changed_when: false

- name: Set SystemdCgroup=true in containerd config
  ansible.builtin.replace:
    path: /tmp/containerd.toml
    regexp: (\s)SystemdCgroup = false
    replace: \1SystemdCgroup = true
  register: containerd

- name: Copy containerd config if it differs
  ansible.builtin.copy:
    remote_src: true
    src: /tmp/containerd.toml
    dest: /etc/containerd/config.toml
    mode: '0744'
  register: containerd

- name: Restart containerd when config changed
  ansible.builtin.systemd:
    name: containerd
    state: restarted
  when: containerd.changed

########################
# Networking
########################

- name: Copy sysctl.d/99-kube-networking.conf
  ansible.builtin.copy:
    src: "files/sysctl.d/99-kube-networking.conf"
    dest: "/etc/sysctl.d/99-kube-networking.conf"
    mode: "0744"
  register: sysctl_changed

- name: Reload sysctl settings
  ansible.builtin.command: "sysctl --system"
  changed_when: sysctl_changed.changed
  when: sysctl_changed.changed

########################
# Prep
########################

- name: Create .kube directory
  become: true
  become_user: joris
  ansible.builtin.file:
    path: "/home/joris/.kube"
    state: directory
    mode: "0755"
    owner: "joris"
    group: "joris"
  when: inventory_hostname == groups['control'][0]

- name: Check for existing cluster
  become: true
  ansible.builtin.stat:
    path: "/etc/kubernetes/admin.conf"
  register: kube_conf
  when: inventory_hostname == groups['control'][0]

- name: Dump stat
  ansible.builtin.debug:
    msg: "{{ kube_conf }}"
  when: inventory_hostname == groups['control'][0]

- name: Initialize the cluster
  become: true
  ansible.builtin.command: |
    kubeadm init \
      --pod-network-cidr {{ kube_cidr }} \
      --control-plane-endpoint {{ kube_ctl }} \
      --apiserver-advertise-address {{ ts_ipv4 }} \
      --upload-certs
  changed_when: "not kube_conf.stat.exists"
  when: "inventory_hostname == groups['control'][0] and not kube_conf.stat.exists"
  notify:
    - Copy kube config to user home
    - Install Flannel
    - Generate join token

- name: Start join handlers
  ansible.builtin.debug: ''
  tags:
    - join
  changed_when: true
  notify:
    - Generate join token
    - Join control nodes
    - Join worker nodes

# - name: Import Google Cloud public signing key
#   become: true
#   ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
#   when: "!gc_key_present.exists || (gc_key_downloaded.stat.checksum != gc_key_present.stat.checksum)"
#   changed_when: true

# Install containerd:
# apt install containerd

# Create default containerd config:
# containerd config default | sudo tee /etc/containerd/config.toml

# Edit ONE setting in /etc/containerd/config.toml:
# nano /etc/containerd/config.toml
#   DELETE THE LINE that contains: systemd_cgroup
#   ENSURE that SystemdCgroup is TRUE: "SystemdCgroup = true"

# Edit /etc/sysctl.conf:
# - Uncomment "net.ipv4.ip_forward=1" to enable bridging

# Create/edit /etc/modules-load.d/k8s.conf:
# - Add line: br_netfilter
# Save file.

# Install:
#   apt install -y ca-certificates curl

# Download the Google Cloud public signing key:
#   curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

# Add the kubernetes apt repository:
#   echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Install kube binaries:
#   sudo apt update && sudo apt install -y kubeadm kubectl kubelet
#     # kubeadm helps us create a cluster and join nodes
#     # kubectl provides command line utility to manage a cluster and interact with it
#     # kubelet is an agent -- it facilitates communication between nodes

# Initialize the cluster [MASTER ONLY]:
#   sudo kubeadm init --control-plane-endpoint=100.104.244.108 --node-name k8s-master --pod-network-cidr=10.244.0.0/16

# (Save the output)

# (Copy the config to your local machine)

# Deploy flannel [LOCAL]:
#   kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml





    kube_cidr: 10.244.0.0/16
    kube_ctl: ctl.joris.me


    kubeadm init \
      --pod-network-cidr 10.244.0.0/16 \
      --control-plane-endpoint ctl.joris.me \
      --apiserver-advertise-address $(tailscale ip --4) \
      --upload-certs 